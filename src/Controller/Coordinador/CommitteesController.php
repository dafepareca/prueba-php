<?php
namespace App\Controller\Coordinador;

use App\Controller\AppController;
use App\Model\Entity\HistoryDetail;
use App\Model\Entity\HistoryNormalization;
use App\Model\Entity\LogTransactional;
use App\Model\Table\HistoryStatusesTable;
use Cake\Event\Event;
use Cake\Database\Exception;
use App\Controller\LogTransaccionController;
use Cake\Datasource\ConnectionManager;

/**
 * Committees Controller
 *
 * @property \App\Model\Table\CommitteesTable $Committees
 * @property \App\Model\Table\AdjustedObligationsTable $AdjustedObligations
 * @property \App\Model\Table\AdjustedObligationsDetailsTable $AdjustedObligationsDetails
 * @property \App\Controller\Component\DaviviendaComponent $Davivienda
 *
 * @method \App\Model\Entity\Committee[] paginate($object = null, array $settings = [])
 */
class CommitteesController extends AppController
{

    public function beforeFilter(Event $event)
    {
        $this->Security->setConfig('unlockedActions', ['rechazar_comite']);

        parent::beforeFilter($event); // TODO: Change the autogenerated stub
    }

    /**
    * Index method
    * @return \Cake\Network\Response|null
    */
    public function index()
    {
        $this->loadComponent('Search');
        $conditions = $this->Search->getConditions();
        $conditions['resolved'] = 0;
        $conditions['Coordinador.busines_id'] = $this->Auth->user('busines_id');
        $this->paginate = [
            'conditions' => $conditions,
            'contain' => ['Users', 'HistoryCustomers','Asesor'=>['Business'],'Coordinador'],
            'order' => ['Committees.id' => 'ASC']
        ];
        $committees = $this->paginate($this->Committees);
        $this->set(compact('committees'));
        $this->set('_serialize', ['committees']);
    }

    /**
     * View method
     *
     * @param string|null $id Committee id.
     * @return \Cake\Http\Response|void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $this->loadModel('Obligations');

        $committee = $this->Committees->get($id, [
            'contain' => [
                'Users',
                'HistoryCustomers' => [
                    'HistoryNormalizations',
                    'HistoryPunishedPortfolios',
                    'HistoryPaymentVehicles',
                    'Users',
                    'HistoryDetails' => ['TypeObligations']
                ]
            ]
        ]);

        $disponibleNegociacion = $committee->history_customer->payment_capacity;

        foreach ($committee->history_customer->history_details as $detail){
            if(!$detail->selected || $detail->strategy != 'Unificación de Obligaciones'){
                $disponibleNegociacion -= ($detail->new_fee > 0)?$detail->new_fee:$detail->fee;
            }
        }

        $obligations = $this->Obligations->find()
            ->where(['customer_id' => $committee->history_customer->customer_id])
            ->contain([
                'TypeObligations'
            ])

            ->all();

        $this->set('committee', $committee);
        $this->set('obligations', $obligations);
        $this->set('disponibleNegociacion', $disponibleNegociacion);
        $this->set('_serialize', ['committee','obligations']);
    }

    /**
     * Add method
     *
     * @return \Cake\Network\Response|void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $committee = $this->Committees->newEntity();
        if ($this->request->is('post')) {
            $committee = $this->Committees->patchEntity($committee, $this->request->getData());
            if ($this->Committees->save($committee)) {
                $this->Flash->success(__('The {0} has been saved.', 'Committee'));
                return $this->redirect(['action' => 'index']);
            } else {
                $this->Flash->error(__('The {0} could not be saved. Please, try again.', 'Committee'));
            }
        }
        $users = $this->Committees->Users->find('list', ['limit' => 200]);
        $historyCustomers = $this->Committees->HistoryCustomers->find('list', ['limit' => 200]);
        $this->set(compact('committee', 'users', 'historyCustomers'));
        $this->set('_serialize', ['committee']);
    }

    /**
     * Edit method
     *
     * @param string|null $id Committee id.
     * @return \Cake\Network\Response|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $committee = $this->Committees->get($id, [
            'contain' => []
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $committee = $this->Committees->patchEntity($committee, $this->request->getData());
            if ($this->Committees->save($committee)) {
                $this->Flash->success(__('The {0} has been saved.', 'Committee'));
                return $this->redirect(['action' => 'index']);
            } else {
                $this->Flash->error(__('The {0} could not be saved. Please, try again.', 'Committee'));
            }
        }
        $users = $this->Committees->Users->find('list', ['limit' => 200]);
        $historyCustomers = $this->Committees->HistoryCustomers->find('list', ['limit' => 200]);
        $this->set(compact('committee', 'users', 'historyCustomers'));
        $this->set('_serialize', ['committee']);
    }

    public function aceptar_comite($id){
        $connection = ConnectionManager::get('default');
        $connection->begin();
        $this->autoRender = false;
        $this->response->type('json');

        $this->loadModel('Committees');
        $this->loadModel('HistoryCustomers');
        $this->loadModel('AdjustedObligations');
        $this->loadModel('AdjustedObligationsDetails');

        $resp = [
            'success' => true,
            'data' => [],
            'message' => __("Negociacion enviada al cliente."),
        ];

        try{
            if(isset($this->request->data['normalizacion_id'])) {

                $committee = $this->Committees->get($id, [
                    'contain' => [
                        'Users',
                        'HistoryCustomers' => [
                            'HistoryNormalizations' => [
                                'conditions' => ['id' => $this->request->getData('normalizacion_id')]
                            ],
                            'HistoryDetails' => ['TypeObligations']
                        ]
                    ]
                ]);

                /** @var  $normalizations HistoryNormalization */
                $normalizations = $committee->history_customer->history_normalizations[0];

                $AdjustedObligationsDetailsGetCount = $this->AdjustedObligationsDetails->find()->where(['adjusted_obligation_id' => $committee->adjusted_obligation_id])->count();

                if($AdjustedObligationsDetailsGetCount > 0) {
                    $AdjustedObligationsDetailsUpdate = $this->AdjustedObligationsDetails->updateAll(
                        [
                            'months_term' => $normalizations->term,
                            'new_fee' => $normalizations->fee,
                            'monthly_rate' => $normalizations->rate,
                        ],
                        [
                            'adjusted_obligation_id' => $committee->adjusted_obligation_id
                        ]
                    );

                    if($AdjustedObligationsDetailsUpdate==null || $AdjustedObligationsDetailsUpdate == 0 || $AdjustedObligationsDetailsUpdate < 0){
                        throw new Exception("Se genero un error al momento de realizar actualizacion de la informacion en la tabla AdjustedObligationsDetails en la funcion aceptar_comite del controlador Committees");
                    }
                }
            }else{
                $committee = $this->Committees->get($id, [
                    'contain' => [
                        'Users',
                        'HistoryCustomers' => [
                            'HistoryDetails' => ['TypeObligations']
                        ]
                    ]
                ]);
            }

            $AdjustedObligationsGetCount = $this->AdjustedObligations->find()->where(['id' => $committee->adjusted_obligation_id])->count();

            if($AdjustedObligationsGetCount > 0) {
                $AdjustedObligationsUpdate = $this->AdjustedObligations->updateAll(
                    [
                        'approved_committee' => 1,
                        'pending_committee' => 0,
                        'date_negotiation' => date('Y-m-d H:i:s'),
                        'coordinator_id' => $this->Auth->user('id'),
                        'coordinator_name' => $this->Auth->user('name'),
                        'code_manager' => $this->Auth->user('code_manager')
                    ],
                    [
                        'id' => $committee->adjusted_obligation_id
                    ]
                );

                if ($AdjustedObligationsUpdate == null || $AdjustedObligationsUpdate == 0 || $AdjustedObligationsUpdate < 0) {
                    throw new Exception("Se genero un error al momento de realizar actualización de la información en la tabla AdjustedObligations en la funcion aceptar_comite del controlador Committees");
                }
            }
        
            $HistoryCustomersGetCount = $this->HistoryCustomers->find()->where(['id' => $committee->history_id])->count();

            if($HistoryCustomersGetCount > 0) {
                $HistoryCustomersUpdate = $this->Committees->HistoryCustomers->updateAll(
                    ['history_status_id' => HistoryStatusesTable::ACEPTADA_COMITE],
                    ['id' => $committee->history_id]
                );

                if ($HistoryCustomersUpdate == null || $HistoryCustomersUpdate == 0 || $HistoryCustomersUpdate < 0) {
                    throw new Exception("Se genero un error al momento de realizar actualización de la información en la tabla HistoryCustomers en la funcion aceptar_comite del controlador Committees");
                }
            }
    
            $AceptarComite = array(
                'estado' => "Aceptada comite",
                'id' => $committee->history_id,
                'approved_committee' => 1,
                'coordinator_name' => $this->Auth->user('name')
            );
            $logTransactional = LogTransactional::AceptarComite($AceptarComite);

            $HistoryCustomersGetCount = $this->Committees->find()->where(['id' => $id])->count();

            if($HistoryCustomersGetCount > 0) {
                $CommitteesUpdate = $this->Committees->updateAll(['resolved' => 1],['id' => $id]);
                if ($CommitteesUpdate == null || $CommitteesUpdate == 0 || $CommitteesUpdate < 0) {
                    throw new Exception("Se genero un error al momento de realizar actualización de la información en la tabla Committees en la funcion aceptar_comite del controlador Committees");
                }
            }

            $this->loadComponent('Davivienda');

            $negociacion = $this->AdjustedObligations->find()
                ->where(['id' => $committee->adjusted_obligation_id])
                ->contain(
                    [
                        'AdjustedObligationsDetails'
                    ]
                )
                ->first();

            /*if($negociacion->normalization){
                $this->Davivienda->generate_pdf_normalization($negociacion);
            }else{
                $this->Davivienda->generate_pdf($negociacion);
            }*/

            $connection->commit();

        }catch (Exception $th) {
            $mensaje = "Se presento un error en la funcion Aceptar comité";
            $parametro = [
                'history_id' => $committee->history_id,
                'adjusted_id' => $committee->adjusted_obligation_id
            ];
            $logTran = LogTransaccionController::EscribirLog($mensaje,$parametro,$th);
            $connection->rollback();

            $resp["success"] = false;
            $resp['message'] = __('Error inesperado, por favor intente de nuevo.');
        }

        echo json_encode($resp);
    }

    public function rechazar_comite($id){
        $connection = ConnectionManager::get('default');
        $connection->begin();
        $this->autoRender = false;
        $this->response->type('json');

        $this->loadModel('Committees');
        $this->loadModel('HistoryCustomers');
        $this->loadModel('AdjustedObligations');
        $this->loadModel('AdjustedObligationsDetails');
        $this->loadModel('Obligations');

        $resp = [
            'success' => true,
            'data' => [],
            'message' => __('Negociación rechazada.')
        ];

        try{
            if(isset($this->request->data['normalizacion_id'])) {
                $committee = $this->Committees->get($id, [
                    'contain' => [
                        'Users',
                        'HistoryCustomers' => [
                            'HistoryNormalizations' => [
                                'conditions' => ['id' => $this->request->getData('normalizacion_id')]
                            ],
                            'HistoryDetails' => ['TypeObligations']
                        ]
                    ]
                ]);

                /** @var  $normalizations HistoryNormalization*/
                $normalizations = $committee->history_customer->history_normalizations[0];

                $obligations = [];
                /** @var  $obligation HistoryDetail*/
                foreach ($committee->history_customer->history_details as $obligation){
                    if($obligation->selected) {
                        $obligations[] = $obligation->obligation;
                    }
                }
            }else{
                $committee = $this->Committees->get($id, [
                    'contain' => [
                        'Users',
                        'HistoryCustomers' => [
                            'HistoryDetails' => ['TypeObligations']
                        ]
                    ]
                ]);
            }
            
            $AdjustedObligationsGetCount = $this->AdjustedObligations->find()->where(['id' => $committee->adjusted_obligation_id])->count();

            if($AdjustedObligationsGetCount > 0) {
                $AdjustedObligationsUpdate = $this->AdjustedObligations->updateAll(
                    [
                        'approved_committee' => 0,
                        'pending_committee' => 0,
                        'reason_rejection' => $this->request->getData('reason_rejection'),
                        'date_negotiation' => date('Y-m-d H:i:s'),
                        'coordinator_id' => $this->Auth->user('id'),
                        'coordinator_name' => $this->Auth->user('name'),
                        'code_manager' => $this->Auth->user('code_manager')
                    ],
                    [
                        'id' => $committee->adjusted_obligation_id
                    ]
                );

                if ($AdjustedObligationsUpdate == null || $AdjustedObligationsUpdate == 0 || $AdjustedObligationsUpdate < 0) {
                    throw new Exception("Se genero un error al momento de realizar actualización de la información en la tabla AdjustedObligations en la funcion rechazar_comite del controlador Committees");
                }
            }

            $HistoryCustomersGetCount = $this->HistoryCustomers->find()->where(['id' => $committee->history_id])->count();

            if($HistoryCustomersGetCount > 0) {
                $HistoryCustomersUpdate = $this->Committees->HistoryCustomers->updateAll(
                    ['history_status_id' => HistoryStatusesTable::RECHAZADA_COMITE],
                    ['id' => $committee->history_id]
                );
                
                if ($HistoryCustomersUpdate == null || $HistoryCustomersUpdate == 0 || $HistoryCustomersUpdate < 0) {
                    throw new Exception("Se genero un error al momento de realizar actualización de la información en la tabla HistoryCustomers en la funcion rechazar_comite del controlador Committees");
                }
            }
    
            $arrayDesisteComite = array(
                'estado' => 'Rechazada comite',
                'id' => $committee->history_id,
                'approved_committee' => 0,
                'reason_rejection' => $this->request->getData('reason_rejection'),
                'coordinator_name' => $this->Auth->user('name')
            );

            $logTransactional = LogTransactional::DesisteCommite($arrayDesisteComite);
        
            $HistoryCustomersGetCount = $this->Committees->find()->where(['id' => $id])->count();

            if($HistoryCustomersGetCount > 0) {
                $CommitteesUpdate = $this->Committees->updateAll(['resolved' => 1],['id' => $id]);
                if ($CommitteesUpdate == null || $CommitteesUpdate == 0 || $CommitteesUpdate < 0) {
                    throw new Exception("Se genero un error al momento de realizar actualización de la información en la tabla Committees en la funcion rechazar_comite del controlador Committees");
                }
            }

            $connection->commit();

        }catch (Exception $th) {
            $resp["success"] = false;
            $resp['message'] = __('Error inesperado, por favor intente de nuevo.');

            $mensaje = "Se presento un error en la funcion declinar comité";
            $parametro = [
                'history_id' => $committee->history_id,
                'adjusted_id' => $committee->adjusted_obligation_id
            ];
            $logTran = LogTransaccionController::EscribirLog($mensaje,$parametro,$th);
            $connection->rollback();
        }

        echo json_encode($resp);
    }

}
