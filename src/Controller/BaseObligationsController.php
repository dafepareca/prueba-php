<?php
namespace App\Controller;

use App\Controller\AppController;
use App\Model\Entity\AdjustedObligation;
use App\Model\Entity\Busines;
use App\Model\Entity\Customer;
use App\Model\Entity\HistoryStatus;
use App\Model\Entity\Obligation;
use App\Model\Table\AccessTypesActivitiesTable;
use App\Model\Table\AdjustedObligationsTable;
use App\Model\Table\CityOfficesTable;
use App\Model\Table\HistoryStatusesTable;
use App\Model\Table\ObligationsTable;
use App\Model\Table\QueriesCustomersTable;
use App\Model\Table\RolesTable;
use App\Model\Table\TypeObligationsTable;
use App\Model\Table\TypesConditionsTable;
use App\Utility\Pdf;
use Cake\Cache\Cache;
use Cake\Core\Configure;
use Cake\Database\Exception;
use Cake\Event\Event;
use Cake\Log\Log;
use Cake\Mailer\Email;
use Cake\Network\Session;
use Cake\ORM\TableRegistry;
use Cake\View\View;
use Psy\Util\Json;
use Cake\Datasource\ConnectionManager;

/**
 * Customers Controller
 *
 * @property \App\Model\Table\CustomersTable $Customers
 * @property \App\Model\Table\ObligationsTable $Obligations
 * @property \App\Model\Table\CityOfficesTable $CityOffices
 * @property \App\Model\Table\CustomerTypeIdentificationsTable $CustomerTypeIdentifications
 * @property \App\Model\Table\AdjustedObligationsTable $AdjustedObligations
 * @property \App\Model\Table\CommitteesTable $Committees
 * @property \App\Controller\Component\DaviviendaComponent $Davivienda
 * @property \App\Model\Table\HistoryCustomersTable $HistoryCustomers
 * @property \App\Model\Table\HistoryNormalizationsTable $HistoryNormalizations
 * @property \App\Model\Table\HistoryPunishedPortfoliosTable $HistoryPunishedPortfolios
 * @property \App\Model\Table\QueriesCustomersTable $QueriesCustomers
 * @property \App\Model\Table\HistoryPaymentVehiclesTable $HistoryPaymentVehicles
 * @property \App\Model\Table\BusinessTable $Business
 *
 */
class BaseObligationsController extends AppController
{

    var $data = [];
    var $tipos = [];
    var $tdc = false;
    var $cxr = false;
    var $cxf = false;
    var $hip = false;
    var $veh = false;
    var $dataForm = [];
    var $obligaciones;
    var $parametros = [];
    var $negociacion = [];
    var $customer = [];

    public function initialize()
    {
        $this->loadComponent('Davivienda');

        $settings = Cache::read('settings', 'long');
        $this->parametros = $settings['Parametros'];

        parent::initialize(); // TODO: Change the autogenerated stub
        $this->viewBuilder()->setLayout('ajax');
    }


    public function beforeFilter(Event $event)
    {
        $this->Security->setConfig('unlockedActions', ['ofertaVehiculo','pagoTotalVehiculo','validarOfertaVehiculo','resultado', 'evaluar','oferta','resumen','nuevasCuotas','finalizar','reject','reject_offer','rejectOfferNegotiation','send_committee','reportarError']);

        if (Cache::read($this->Auth->user('session_id').'customer') === false) {
            $this->Flash->error(__('Debe consultar el cliente...'));
        }

        $negociacion = Cache::read($this->Auth->user('session_id').'negociacion');
        if (empty($negociacion)) {
            $negociacion = [];
            Cache::write($this->Auth->user('session_id').'negociacion',$negociacion);
        }

        $this->negociacion = $negociacion;

        $obligaciones = Cache::read($this->Auth->user('session_id').'obligaciones');
        if (empty($obligaciones)) {
            $obligaciones = [];
            Cache::write($this->Auth->user('session_id').'obligaciones',$obligaciones);
        }

        $this->obligaciones = $obligaciones;

        $customer = Cache::read($this->Auth->user('session_id').'customer');
        if (empty($customer)) {
            $customer = [];
            Cache::write($this->Auth->user('session_id').'customer',$customer);
        }

        $this->customer = $customer;

        parent::beforeFilter($event); // TODO: Change the autogenerated stub
    }

    public function beforeRender(Event $event)
    {
        $customer = Cache::read($this->Auth->user('session_id').'customer');
        $negociacion = $this->negociacion;
        $this->set(compact(['customer','negociacion']));
        parent::beforeRender($event); // TODO: Change the autogenerated stub
    }

    /**
     * Index method
     * @return \Cake\Network\Response|null
     */
    public function evaluar($comite = false)
    {
        $timeInicio = microtime(true);
        $this->autoRender = false;
        $this->response->type('json');
        $this->loadModel('Customers');
        $this->loadModel('QueriesCustomers');
        Cache::delete($this->Auth->user('session_id').'normalizacion');
        $connection = ConnectionManager::get('default');
        $connection->begin();

        $paymentCapacity = str_replace('.','',$this->request->getData('customer.payment_capacity'));
        $income = str_replace('.','',$this->request->getData('customer.income'));
        $initialPaymentPunished = str_replace('.','',$this->request->getData('customer.initial_payment_punished'));
        $ofertaHp = str_replace('.','',$this->request->getData('customer.payment_punished_hp'));

        $obligaciones = Cache::read($this->Auth->user('session_id').'obligaciones');
        $errorValidacion = false;

        /** @var  $obligacion Obligation*/
        $obligacionesNegociar = $this->request->getData('marca');

        foreach ($obligaciones as $obligacion){
            $tipo = $obligacion->type_obligation_id;
            if(empty($ofertaHp) && $tipo == TypeObligationsTable::HIP && $obligacion->punished && in_array($obligacion->id,$obligacionesNegociar)){
                $errorValidacion = true;
                $error = [
                        'success' => false,
                        'message' => 'Pago total hipotecario requerido.'
                    ];
            }
        }

        if(empty($comite)){
            $comite = false;
        }

        /** @var  $customer Customer */
        $customer = Cache::read($this->Auth->user('session_id').'customer');
        $idLogL = Cache::read($this->Auth->user('session_id') . 'log');
        $queriesCustomers = $this->QueriesCustomers->find()->where(function ($exp, $q) {
            return $exp->between('created',date('Y-m-01 00:00:00'),date('Y-m-30 11:59:59'));
        })->andWhere(['customer_id' => $customer->id])->count();

        $settings = Cache::read('settings', 'long');

        if($this->Auth->user('role_id') == RolesTable::Asesor){
            $limitQuery = $settings['Clientes']['limit_query_adviser'];
        }else{
            $limitQuery = $settings['Clientes']['limit_query_coordinator'];
        }

        if($errorValidacion){
            echo json_encode($error);
        }elseif($queriesCustomers >=  $limitQuery && $comite == false){
            echo json_encode(
                [
                    'success' => false,
                    'message' => 'El cliente Supero el limite de consultas del mes'
                ]
            );
        }else{
            

            $this->obligaciones = Cache::read($this->Auth->user('session_id').'obligaciones');
            $this->Davivienda->obligations = $this->obligaciones;

            $this->Davivienda->payment_capacity = $paymentCapacity;
            $this->Davivienda->initial_payment_punished = $initialPaymentPunished;
            $this->Davivienda->oferta_hp_catigada = $ofertaHp;
            $this->Davivienda->selected = $this->request->getData('marca');
            $this->Davivienda->pago_total_castigada = isset($this->request->data['pago_total_castigada'])?true:false;
            $this->Davivienda->pago_total_vehiculo = isset($this->request->data['pago_total_vehiculo'])?true:false;
            $this->Davivienda->normalizarConsumo = $this->request->getData('normalizar_consumo');

            $this->customer->income = $income;
            $this->customer->payment_capacity = $paymentCapacity;
            $this->customer->income_source = $this->request->getData('customer.income_source');
            $this->customer->initial_payment_punished = $initialPaymentPunished;
            $this->customer->payment_punished_hp = $ofertaHp;

            Cache::write($this->Auth->user('session_id').'customer',$this->customer);

            $capacidadPago = $paymentCapacity;
            $this->negociacion['capacidad_pago_inicial'] = $capacidadPago;
            Cache::write($this->Auth->user('session_id').'negociacion',$this->negociacion);

            $defineStrategy  = $this->Davivienda->define_strategy($comite);
            $strategy = $defineStrategy;

            $obligaciones = Cache::read($this->Auth->user('session_id').'obligaciones');
            if($strategy['success']) {
                if ($this->evaluar_oferta() && !Cache::read($this->Auth->user('session_id').'normalizacion')) {
                        $this->Davivienda->obligations = Cache::read($this->Auth->user('session_id') . 'obligaciones');
                        $this->Davivienda->payment_capacity = Cache::read($this->Auth->user('session_id') . 'capacidadPago');
                        $normalizacion = $this->Davivienda->normalization(); 
                        Cache::write($this->Auth->user('session_id') . 'normalizacion', $normalizacion);
                        if(!$normalizacion['success']){
                            $strategy['success'] = false;
                            $strategy['message'] = $normalizacion['msg'];
                            $strategy['data'] = [];
                            $resp = $strategy;
                        }else{
                            $resp = $strategy;
                        }

                } elseif(Cache::read($this->Auth->user('session_id').'normalizacion')) {
                    $normalizacion = Cache::read($this->Auth->user('session_id').'normalizacion');
                    $resp = $strategy;
                }else{
                    $resp = $strategy;
                }
            }else{
                $resp = $strategy;
            }
            
            $resp['pago_total_vehiculo'] = isset($this->request->data['pago_total_vehiculo'])?true:false;

            $nuevoHistorial = true;
            if(Cache::read($this->Auth->user('session_id').'-'.$this->customer->id.'-history')){
                $nuevoHistorial = false;
            }

            try{
                if($comite == false){    
                    $QueriesCustomers = $this->QueriesCustomers->newEntity([
                        'customer_id' => $customer->id,
                        'user_id' => $this->Auth->user('id'),
                    ]);
                    $saveQueryCustomer = $this->QueriesCustomers->save($QueriesCustomers);
                    
                    if ($saveQueryCustomer == null || $saveQueryCustomer == 0 || $saveQueryCustomer < 0) {
                        throw new Exception("Se genero un error al momento de guardar informacion en la tabla query_customer en la funcion evaluar del controlador BaseObligation");
                    }

                    if ($defineStrategy['success'] == false &&  $defineStrategy['comite'] == false){
                        if($nuevoHistorial){
                            $this->createHistory($obligaciones,$this->customer,HistoryStatusesTable::RECHAZADA);
                        }else{
                            $this->reject_offer('No');
                        }
                    }elseif ($defineStrategy['success'] == true &&  $defineStrategy['comite'] == false && $resp['pago_total_vehiculo'] == false){
                        if($nuevoHistorial){
                            $this->createHistory($obligaciones,$this->customer,HistoryStatusesTable::PENDIENTE,'Si');
                        }else{
                            $this->updateHistory($this->customer,$state = HistoryStatusesTable::PENDIENTE,'Si',$normalizacion);
                        }
                    }
                }elseif ($resp['pago_total_vehiculo'] == false){
                    if($nuevoHistorial){
                        $this->createHistory($obligaciones,$this->customer,HistoryStatusesTable::PENDIENTE,'Si');
                    }else{
                        $this->updateHistory($this->customer,$state = HistoryStatusesTable::PENDIENTE,'Si',$normalizacion);
                    }
                }
                
                $connection->commit();
            }catch (Exception $th) {

                $resp['success'] = false;
                $resp['errorLogTrans'] = true;
                $resp['message'] = 'Error inesperado, por favor intente de nuevo.';

                $obligationSelected = array();
                foreach ($obligaciones as $obligacion) {
                    if (in_array($obligacion->id, $obligacionesNegociar)) {
                        array_push($obligationSelected, $obligacion->obligation);
                    }
                }

                $mensaje = "Ocurre un error al momento de consumir la funcion evaluar del controlador BaseObligations";
                $parametro = array(
                    "id_customer" => $this->customer->id,
                    "id_history" => Cache::read($this->Auth->user('session_id') . '-' . $this->customer->id . '-history'),
                    "id_log" => Cache::read($this->Auth->user('session_id') . 'log'),
                    "capacity" => $paymentCapacity,
                    "Obligation" => $obligationSelected,
                );

                $logTran = LogTransaccionController::EscribirLog($mensaje, $parametro, $th);
                $connection->rollback();
            }

            
            echo json_encode($resp);
            $timeFinal = microtime(true);
            $duracion = ($timeFinal) - ($timeInicio);
            $logTran = LogTransaccionController::EscribirTiempo('Evaluar Oferta','Funcion completa','BaseObligationsController','evaluar',$idLogL,$duracion);

        }

    }

    public function pagoTotalVehiculo(){

        $obligaciones = Cache::read($this->Auth->user('session_id').'obligaciones');

        $this->set(compact('obligaciones'));

        $this->viewBuilder()->setTemplatePath('/Obligations');

        $this->render('pago_total_vehiculo');

    }

    public function oferta(){
        $timeInicio = microtime(true);
        $ofertasVigente = [];
        $ofertasCastigada = [];
        $ofertasVehiculo = [];

        $this->obligaciones = Cache::read($this->Auth->user('session_id').'obligaciones');
        $this->negociacion = Cache::read($this->Auth->user('session_id').'negociacion');

        $condiciones = Cache::read('conditions','long');
        $condicionesPS = $condiciones[TypesConditionsTable::PORCENTAJEPAGOSUGERIDO];
        $porcentagePago = $this->Davivienda->getValorCondicion($condicionesPS,$this->customer['exposition']);
        $capacidadDisponible = $this->negociacion['capacidad_pago_inicial'];

        /** @var  $obligacion Obligation*/
        foreach ($this->obligaciones as $obligacion){
            if($obligacion->estrategia != 1){
                $capacidadDisponible -= ($obligacion->nuevaCuota > 0)?$obligacion->nuevaCuota:$obligacion->fee;
            }
            if ($obligacion->type_obligation_id == TypeObligationsTable::VEH && $obligacion->estrategia == 15){
                $ofertasVehiculo[] = $obligacion;
            }elseif($obligacion->punished){
                $ofertasCastigada[] = $obligacion;
            }else{
                $ofertasVigente[] = $obligacion;
                if($obligacion->estrategia == 3){
                    $obligacion->pagoSugerido = $obligacion->minimum_payment*($porcentagePago/100) ;
                    $obligacion->pagoReal = ($obligacion->pagoSugerido > $obligacion->acomulated_payment)?$obligacion->pagoSugerido - $obligacion->acomulated_payment:0;
                }elseif ($obligacion->estrategia == 2 || $obligacion->estrategia == 12){
                    $obligacion->pagoSugerido = $obligacion->nuevaCuota*($this->parametros['porcentaje_pago_sugerido']/100);
                    $obligacion->pagoReal = ($obligacion->pagoSugerido > $obligacion->acomulated_payment)?$obligacion->pagoSugerido - $obligacion->acomulated_payment:0;
                    // if ($obligacion->type_obligation_id == TypeObligationsTable::HIP && count((array)$this->obligaciones) == 1) {
                    //     $obligacion->pagoSugerido = Cache::read($this->Auth->user('session_id').'nuevaCuotaHip');
                    //     Log::write('debug', ">>>>>>>>>>>>>>>" . $obligacion->pagoSugerido);
                    // }
                }
            }
        }

        Cache::write($this->Auth->user('session_id').'obligaciones',$this->obligaciones);
        $idLogL = Cache::read($this->Auth->user('session_id') . 'log');
        
        if($this->session->check('disponibleCastigada')){
            $this->set('disponibleCastigada',$this->session->read('disponibleCastigada'));
        }

        $normalizacion = Cache::read($this->Auth->user('session_id').'normalizacion');
        $vehiculo = Cache::read($this->Auth->user('session_id').'vehiculo');
        $cuotasCastigada = Cache::read($this->Auth->user('session_id').'propuesta_castigada');

        $this->set(compact('normalizacion','capacidadPago','cuotasCastigada','vehiculo'));

        $coordinadores = [];
        if($this->request->getData('comite') == 1){
            $this->loadModel('Coordinador');
            $coordinadores = $this->Coordinador->find('list', ['limit' => 200, 'order' => 'name ASC'])
                ->where(['role_id' => RolesTable::Coordinador, 'busines_id in' => [$this->Auth->user('busines_id'),2]]);
        }


        $comite = (bool)$this->request->getData('comite');

        $this->set(
            [
                'ofertasVigente' => $ofertasVigente,
                'ofertasCastigada' => $ofertasCastigada,
                'ofertasVehiculo' => $ofertasVehiculo,
                'capacidadPago' => $this->negociacion['capacidad_pago_inicial'],
                'comite' => $comite,
                'capacidad_disponible' => $capacidadDisponible
            ]
        );

        $this->viewBuilder()->setTemplatePath('/Obligations');
        $timeFinal = microtime(true);
        $duracion = ($timeFinal) - ($timeInicio);
        $logTran = LogTransaccionController::EscribirTiempo('Renderisar una Oferta','Funcion completa','BaseObligationsController','oferta',$idLogL,$duracion);
        $mensaje = "Finalizo la función de generar una oferta de negociación";
        $idHistoryL = Cache::read($this->Auth->user('session_id').'-'.$this->customer->id.'-history');
        $customerL = Cache::read($this->Auth->user('session_id').'customer');
        $parametros = [
            'idHistory' => $idHistoryL,
            'idLog' => $idLogL,
            'customer' => $customerL->id,
            'cargue' => $customerL->charge_id,
            'capacidad_pago' => $customerL->payment_capacity
        ];
        $logTran = LogTransaccionController::EscribirLog($mensaje,$parametros);
        $this->render('oferta');
    }


    public function resumen(){
        
        $this->obligaciones = Cache::read($this->Auth->user('session_id').'obligaciones');
        $normalizacion = Cache::read($this->Auth->user('session_id').'normalizacion');
        $normalizacionCastigada = Cache::read($this->Auth->user('session_id').'propuesta_castigada');
        $citaCentroCartera = false;

        $paymentAgreed = str_replace('.','',$this->request->getData('payment_agreed'));
        $paymentAgreedUnificacion = str_replace('.','',$this->request->getData('payment_agreed_unificacion'));

        $pagos = array();
        if(isset($_POST['pago'])){
            $pagos = $_POST['pago'];
        }
        foreach($this->obligaciones as $obligacion){

            if(isset($pagos[$obligacion->id])){
                $TotalPagoReal += str_replace('.','',$pagos[$obligacion->id]);
            }
        }

        //$pagoAcumuladoResumen = ((int) $paymentAgreed + (int) $paymentAgreedUnificacion);
        /*Log::write("info","paymentAgreed ->".$paymentAgreed);
        Log::write("info","paymentAgreedUnificacion ->".$paymentAgreedUnificacion);
        Log::write("info","TotalPagoReal ->".$TotalPagoReal);
        Log::write("info",var_dump($this->request->getData('pago')));*/
        
        /*if ((int)$paymentAgreedUnificacion == (int)$paymentAgreed ) {
            $pagoAcumuladoResumen = (int) $paymentAgreedUnificacion;
        }else{
            $pagoAcumuladoResumen = ((int) $paymentAgreed + (int) $paymentAgreedUnificacion);
        }*/
        $pagoAcumuladoResumen = (int) $paymentAgreedUnificacion + (int) $TotalPagoReal;
        $this->negociacion['pago_acordado'] = $pagoAcumuladoResumen;

        Cache::write($this->Auth->user('session_id').'negociacion',$this->negociacion);

        $comite = false;
        $coordinadores = [];
        if(isset($this->request->data['comite'])){
            $comite = true;
            if($this->request->getData('comite') == 1){
                $this->loadModel('Coordinador');
                $coordinadores = $this->Coordinador->find('list', ['limit' => 200, 'order' => 'name ASC'])
                    ->where(['role_id' => RolesTable::Coordinador, 'busines_id in' => [$this->Auth->user('busines_id'),2]]);
            }
        }else{
            #$this->create_history(HistoryStatusesTable::ACEPTADA);
        }

        $this->loadModel('CityOffices');

        $ciudades = $this->CityOffices->find('list',['order' => 'name ASC']);

        $diaPagoCredito = [];
        for ($i=1; $i <= 30; $i++) { 
            $diaPagoCredito[sprintf("%02d", $i)] = sprintf("%02d", $i);
        }

        $documentosPagareFields = [
            1 => 'Requiere Firma de Documentos',
            0 => 'No Requiere Firma de Documentos',
        ];
        $estrategias = [];
        $pagares = [];
        $pagareNull = 1;

        if(isset($this->request->data['propuesta_aceptada'])) {
            $normalizacion = $normalizacion['data'][$this->request->getData('propuesta_aceptada')];
            $this->negociacion['normalizacion'] = $normalizacion;
            Cache::write($this->Auth->user('session_id').'negociacion',$this->negociacion);
        }

        if(isset($this->request->data['propuesta_aceptada_castigada'])) {
            $propuestaCastigada = $normalizacionCastigada[$this->request->getData('propuesta_aceptada_castigada')];
            $this->negociacion['normalizacion'] = $normalizacion;
            $this->set('propuestaCastigada',$propuestaCastigada);
        }

        $dataObligacion = $this->request->getData('obligacion');

        $sinCambio = [];
        $normalizadas = [];
        $conCambio = [];
        $otrasAlternativas = [];
        $castigada = [];
        $castigadaHp = [];
        $total = 0;
        $totalCuota = 0;
        $totalNuevaCuota = 0;
        $saldo = 0;
        $saldoCastigada = 0;
        // If addition of pagare field result more than 0, it wil activate $citaCentroCartera
        $campoPagare = true;

        $totalCastigada = 0;
        $totalCuotaCastigada = 0;
        $totalNuevaCuotaCastigada = 0;

        $pagoAcordado = $paymentAgreed + (int)$paymentAgreedUnificacion;
        //Log::write("info","pagoAcordado ->".$pagoAcordado);
        //$pagoAcordado = $pagoAcumuladoResumen;
        
        $necesitaPagareUnificacion = false;
        $necesitaPagareACPK = false;
        $necesitaPagareHIP = false;
        $estrategiaUnificacion = false;
        $estrategiaACPK = false;

        $noPagareUnificacion = 0;
        $noPagareAcpk = 0;

        $pagos = array();
        if(isset($_POST['pago'])){
            $pagos = $_POST['pago'];
        }

        /** @var  $obligacion Obligation*/
        
        foreach($this->obligaciones as $obligacion){
            $estrategias[] = $obligacion->estrategia;

            if(isset($pagos[$obligacion->id])){
                $obligacion->pagoReal = str_replace('.','',$pagos[$obligacion->id]);
            }

            if($obligacion->estrategia == 1 ){
                $obligacion->pagoReal = $paymentAgreedUnificacion;
            }

            if($obligacion->punished){
                $totalCastigada += $obligacion->total_debt;
                $totalCuotaCastigada += $obligacion->fee;
                $totalNuevaCuotaCastigada += $obligacion->nuevaCuota;
            }else{
                $total += $obligacion->total_debt;
                $totalCuota += $obligacion->fee;
            }

            if (in_array($obligacion->estrategia,[6,7,8])){
                $otrasAlternativas[] = $obligacion;
            }elseif($obligacion->estrategia == 12 || $obligacion->estrategia == 14){
                $totalNuevaCuota += $obligacion->nuevaCuota;
                $castigada[] = $obligacion;
                $saldoCastigada += $obligacion->total_debt;
            }elseif($obligacion->estrategia == 13){
                $totalNuevaCuota += $obligacion->nuevaCuota;
                $castigadaHp[] = $obligacion;
            }elseif($obligacion->normalizar == 1){
                $saldo += $obligacion->total_debt;
                $normalizadas[] = $obligacion;
            }elseif($obligacion->negociable == 1){
                $totalNuevaCuota += $obligacion->nuevaCuota;
                $conCambio[] = $obligacion;
            }elseif($obligacion->negociable == 0 || $obligacion->restructuring == 1){
                $totalNuevaCuota += $obligacion->fee;
                $sinCambio[] = $obligacion;
            }

            if ($obligacion->estrategia == 1) {
                $estrategiaUnificacion = true;
                if($obligacion->pagare == 1){
                   $necesitaPagareUnificacion = true;
                }elseif ($obligacion->pagare == 0 || $obligacion->pagare == null){
                    $noPagareUnificacion += 1;
                }  
            }
            if ($obligacion->estrategia == 12) {
                $estrategiaACPK = true;
                if($obligacion->pagare == 0 || $obligacion->pagare == null){
                   $necesitaPagareACPK = false;
                }elseif ($obligacion->pagare == 0 || $obligacion->pagare == null){
                    $noPagareAcpk += 1;
                }  
            }
            if ($obligacion->estrategia == 2){
                if($obligacion->type_obligation_id === 5){
                    if($obligacion->company === 5 || $obligacion->segment_id === 10){
                        $necesitaPagareHIP = true;
                    } elseif ($obligacion->pagare) {
                        $necesitaPagareHIP = true;
                    } else{
                        $campoPagare = false;
                    }
                }
                elseif ($obligacion->type_obligation_id == 4){
                    if(!($obligacion->pagare)){
                        $campoPagare = false;
                    }
                }
            }
        }

        if(($necesitaPagareUnificacion && $noPagareUnificacion == 0 ) || ($necesitaPagareACPK && $noPagareAcpk == 0) || $necesitaPagareHIP){
            $citaCentroCartera = true;
        }

        if ($necesitaPagareHIP && !($estrategiaUnificacion || $estrategiaACPK)){
            $diaPagoCredito = null;
        }

        Cache::write($this->Auth->user('session_id').'obligaciones',$this->obligaciones);

        $parameters = [
            'sinCambio',
            'conCambio',
            'otrasAlternativas',
            'normalizadas',
            'customer',
            'normalizacion' => $this->negociacion,
            'negociacion',
            'total',
            'totalCuota',
            'totalNuevaCuota',
            'saldo',
            'ciudades',
            'comite',
            'coordinadores',
            'castigada',
            'castigadaHp',
            'saldoCastigada',
            'totalCastigada',
            'totalCuotaCastigada',
            'pagoAcordado',
            'totalNuevaCuotaCastigada',
            'citaCentroCartera'
        ];

        // Fields required as "Creación Campo Pagaré"

        /* $estrategiasUnique = array_unique($estrategias);
            if(count($estrategiasUnique) === 1 && $estrategiasUnique[0] === 3) {
            $citaCentroCartera = false;
        } */

        

        if ($campoPagare) {
            $documentosPagare = $documentosPagareFields[$citaCentroCartera];
            array_push($parameters, 'diaPagoCredito', 'documentosPagare');
        }
            
        $mensaje = "Finaliza la función de Resumen de creditos";
        $idHistoryL = Cache::read($this->Auth->user('session_id').'-'.$this->customer->id.'-history');
        $idLogL = Cache::read($this->Auth->user('session_id') . 'log');
        $customerL = Cache::read($this->Auth->user('session_id').'customer');
        $parametros = [
            'idHistory' => $idHistoryL,
            'idLog' => $idLogL,
            'customer' => $customerL->id,
            'cargue' => $customerL->charge_id,
            'capacidad_pago' => $customerL->payment_capacity
        ];
        $logTran = LogTransaccionController::EscribirLog($mensaje,$parametros);


        $this->set(compact($parameters));
        $this->viewBuilder()->setTemplatePath('/Obligations');
    }

    // Fields required as "Creación Campo Pagaré"
    private function strategyCheck($needle) {
        foreach ($needle as $stack) {
            if (!in_array($stack, [1, 4, 3, 12])) {
                return false;
            }
        }
        foreach ($needle as $stack) {
            if (in_array($stack, [1, 12])) {
                return true;
            }
        }
        return false;
    }

    public function evaluar_oferta(){

        $this->obligaciones = Cache::read($this->Auth->user('session_id').'obligaciones');

        $normalizar = false;

        /*$dataObligacion = $this->request->getData('obligacion');*/

        /** @var  $obligacion Obligation*/
        foreach($this->obligaciones as $obligacion){
            if($obligacion->estrategia == 1){
                $normalizar = true;
            }

            /*if(isset($dataObligacion[$obligacion->id]['acepta'])){
                if($dataObligacion[$obligacion->id]['acepta'] == 1){
                    $obligacion->negociable = 1;
                }
            }*/
        }

        Cache::write($this->Auth->user('session_id').'obligaciones',$this->obligaciones);

        return $normalizar;
    }

    public function finalizar(){

        $timeInicio = microtime(true);
        $this->autoRender = false;
        $this->response->type('json');
        $connection = ConnectionManager::get('default');
        $connection->begin();

        $this->obligaciones = Cache::read($this->Auth->user('session_id').'obligaciones');
        $normalizacion = Cache::read($this->Auth->user('session_id').'normalizacion');

        $idHistoryL = Cache::read($this->Auth->user('session_id').'-'.$this->customer->id.'-history');
        $idLogL = Cache::read($this->Auth->user('session_id') . 'log');
        $customerL = Cache::read($this->Auth->user('session_id').'customer');
        $parametros = [
            'idHistory' => $idHistoryL,
            'idLog' => $idLogL,
            'customer' => $customerL->id,
            'cargue' => $customerL->charge_id,
            'capacidad_pago' => $customerL->payment_capacity
        ];

        try {
            if(isset($this->request->data['propuesta_aceptada'])) {
                $normalizacion = $normalizacion['data'][$this->request->getData('propuesta_aceptada')];
                $this->negociacion['normalizacion'] = $normalizacion;
                Cache::write($this->Auth->user('session_id').'negociacion',$this->negociacion);
            }
            if($id = $this->ajuste_data()){
                $this->updateHistory($this->customer,HistoryStatusesTable::ACEPTADA,'Si',$normalizacion);
                
                $timeFinal = microtime(true);
                $duracion = ($timeFinal) - ($timeInicio);
                $logTran = LogTransaccionController::EscribirTiempo('Finalizar negociación','Funcion completa','BaseObligationsController','finalizar',$idLogL,$duracion);
        
               # $this->generate_pdf($id);
               
                echo json_encode([
                        'success' => true,
                        'message' => __('Negociación enviada al cliente.')
                    ]
                );
            }else{
    
                $timeFinal = microtime(true);
                $this->tiempos($timeInicio, $timeFinal, 'finalizar');
    
                echo json_encode([
                        'success' => false,
                        'message' => 'Error al generar la negociación.'
                    ]
                );
            }
            $mensaje = "Finaliza la función de finalizar negociación";
            $logTran = LogTransaccionController::EscribirLog($mensaje,$parametros);

            $connection->commit();
    
        } catch (Exception $th) {
            $mensaje = "Se presento un error en la función de finalizar una negociación.";
            $logTran = LogTransaccionController::EscribirLog($mensaje,$parametros,$th);
            $connection->rollback();
            echo json_encode([
                'success' => false,
                'message' => 'En este momento no se puede completar la operación de finalizar negociación, por favor intente nuevamente.'
            ]);
        }
        
    }

    public function generate_pdf($id){

        $timeInicio = microtime(true);

        $this->autoRender = false;
        $this->loadModel('AdjustedObligations');
        $negociacion = $this->AdjustedObligations->find()
            ->where(['id' => $id])
            ->contain(
                [
                    'AdjustedObligationsDetails'
                ]
            )
            ->first();
        if($negociacion->normalization){
            $pdf = $this->Davivienda->generate_pdf_normalization($negociacion);
        }else{
            $pdf = $this->Davivienda->generate_pdf($negociacion);
        }

        $timeFinal = microtime(true);
        $this->tiempos($timeInicio, $timeFinal, 'generar pdf');
        return $pdf;

    }

    public function sendEmailPdf($filename){
        $this->autoRender = false;

        $customer = Cache::read($this->Auth->user('session_id').'customer');

        Email::setConfigTransport('mail', [
            'host' => 'mail.sistemcobro.com', //servidor
            'port' => 25, //puerto de conexion
            'username' => 'negociadorvirtual@sistemcobro.com', // Usuario
            'password' => 'P@ss201704*', //contrasena
            'className' => 'Smtp',
        ]);

        try {
            $email = new Email();
            $email
                ->setTransport('mail') //nombre del configTrasnport que acabamos de configurar
                ->setTemplate('accord')
                ->setEmailFormat('html') //formato de correo
                ->setTo('dparra@quantumconnexion.com') //correo para
                ->setFrom('negociadorvirtual@sistemcobro.com') //correo de
                ->setSubject('Acuerdo') //asunto
                ->setViewVars(
                    [
                        'date' => date('Y/m/d'),
                    ]
                )

                ->setAttachments($filename);

            if(Configure::read('debug')){
                $email->to([
                    'dparra@quantumconnexion.com',
                ]);
            }else{
                $email->to('dparra@quantumconnexion.com');
            }

            $email->send();
        } catch (Exception $e) {
            //echo 'Exception : ',  $e->getMessage(), "\n";
        }
    }

    public function get_resumen_cliente(){

        $this->obligaciones = Cache::read($this->Auth->user('session_id').'obligaciones');

        $resumenFinal = [
            'hipotecario' =>  [
                'total' => 0,
                'pagos_minimos' => 0,
                'cuotas' => 0,
                'nuevas_cuotas' => 0,
            ],
            'vehiculos' =>  [
                'total' => 0,
                'pagos_minimos' => 0,
                'cuotas' => 0,
                'nuevas_cuotas' => 0,
            ],
            'fijos' =>  [
                'total' => 0,
                'pagos_minimos' => 0,
                'cuotas' => 0,
                'nuevas_cuotas' => 0,
            ],
            'rotativos' =>  [
                'total' => 0,
                'pagos_minimos' => 0,
                'cuotas' => 0,
                'nuevas_cuotas' => 0,
            ],
            'total' =>  [
                'total' => 0,
                'pagos_minimos' => 0,
                'cuotas' => 0,
                'nuevas_cuotas' => 0,
            ]
        ];

        /** @var  $obligacion Obligation*/
        foreach($this->obligaciones as $obligacion){
            $tipo = $obligacion->type_obligation_id;
            if($tipo == TypeObligationsTable::TDC || $tipo == TypeObligationsTable::CXR){
                $key = 'rotativos';
            }elseif($tipo == TypeObligationsTable::CXF){
                $key = 'fijos';
            }elseif($tipo == TypeObligationsTable::HIP){
                $key = 'hipotecario';
            }elseif($tipo == TypeObligationsTable::VEH){
                $key = 'vehiculos';
            }

            $resumenFinal[$key]['total'] += $obligacion->total_debt;
            $resumenFinal[$key]['pagos_minimos'] += $obligacion->minimum_payment;
            $resumenFinal[$key]['cuotas'] += $obligacion->fee;
            $resumenFinal[$key]['nuevas_cuotas'] += $obligacion->nuevaCuota;

            $resumenFinal['total']['total'] += $obligacion->total_debt;
            $resumenFinal['total']['pagos_minimos'] += $obligacion->minimum_payment;
            $resumenFinal['total']['cuotas'] += $obligacion->fee;
            $resumenFinal['total']['nuevas_cuotas'] += $obligacion->nuevaCuota;
        }

        $this->set(['resumenFinal' => $resumenFinal]);

    }

    public function export(){

        $data = $this->Obligations->find()->all();

        $this->Obligations->exportCsv(TMP.'pdf/test.csv', $data, []);

    }

    public function nuevasCuotas(){
        $this->autoRender = false;
        $this->response->type('json');

        $this->obligaciones = Cache::read($this->Auth->user('session_id').'obligaciones');
        $normalizacion = Cache::read($this->Auth->user('session_id').'normalizacion');
        $cuotasCastigada = Cache::read($this->Auth->user('session_id').'propuesta_castigada');

        $cuotas = [
            'hipotecario' => 0,
            'vehiculo' => 0,
            'rotativos' => 0,
            'fijos' => 0,
            'castigada' => 0,
            'total' => 0
        ];

        if($this->request->getData('propuesta_aceptada') != null){
            $valor = $normalizacion['data'][$this->request->getData('propuesta_aceptada')]['cuota'];
            $cuotas['fijos'] += $valor;
            $cuotas['total'] += $valor;
        }

        if($this->request->getData('propuesta_aceptada_castigada') != null){
            $valor = $cuotasCastigada[$this->request->getData('propuesta_aceptada_castigada')]['cuota'];
            $cuotas['castigada'] += $valor;

        }

        /** @var  $obligation Obligation*/
        foreach($this->obligaciones as $obligation){
            $tipo = $obligation->type_obligation_id;
            if($obligation->negociable){
                if($tipo == TypeObligationsTable::HIP){
                    $cuotas['hipotecario'] += $obligation->nuevaCuota;
                }elseif($tipo == TypeObligationsTable::CXF){
                    $cuotas['fijos'] += $obligation->nuevaCuota;
                }elseif($tipo == TypeObligationsTable::VEH){
                    $cuotas['vehiculo'] += $obligation->nuevaCuota;
                } elseif($tipo == TypeObligationsTable::TDC || $tipo == TypeObligationsTable::CXR){
                    $cuotas['rotativos'] += $obligation->nuevaCuota;
                }
                $cuotas['total'] += $obligation->nuevaCuota;
            }else{
                if($tipo == TypeObligationsTable::HIP){
                    $cuotas['hipotecario'] += $obligation->fee;
                }elseif($tipo == TypeObligationsTable::CXF){
                    $cuotas['fijos'] += $obligation->fee;
                }
                elseif($tipo == TypeObligationsTable::VEH){
                    $cuotas['vehiculo'] += $obligation->fee;
                }elseif($tipo == TypeObligationsTable::TDC || $tipo == TypeObligationsTable::CXR){
                    $cuotas['rotativos'] += $obligation->fee;
                }
                $cuotas['total'] += $obligation->fee;
            }

        }

        echo  json_encode($cuotas);

    }

    public function reportarError(){
        $this->autoRender = false;

        $this->loadComponent('Email');

        $message = 'error: '.$this->request->getData('error').' url: '.$this->request->getData('url');
        $this->Email->add('davinegociador@sgnpl.com','Davinegociador');

        $this->Email->send(
            'Error '.date('Y-m-d H:i:s'),
            '',
            'message',
            [
                'message' => $message
            ]
        );

        echo json_encode($this->request);

    }

    public function send_committee(){
        $this->autoRender = false;
        $this->response->type('json');

        $this->loadModel('Committees');

        if($adjustedObligationId = $this->ajuste_data(1)){
            $history = $this->updateHistory($this->customer,HistoryStatusesTable::COMITE);
            $committee = $this->Committees->newEntity();
            $datda = [
                'coordinator_id' => $this->request->getData('coordinador'),
                'history_id' => $history,
                'adjusted_obligation_id' => $adjustedObligationId,
                'asesor_id' => $this->Auth->user('id')
            ];

            $committee = $this->Committees->patchEntity($committee, $datda);

            if($this->Committees->save($committee)){
                $result = [
                    'success' => true,
                    'data' => [],
                    'message' => __('Propuesta enviada a comité')
                ];
            }else{
                $result = [
                    'success' => false,
                    'data' => [],
                    'message' => __('Error al enviar propuesta')
                ];
            }

        }else{
            $result = [
                'success' => false,
                'data' => [],
                'message' => __('Error al enviar propuesta')
            ];
        }


        echo json_encode($result);
    }

    public function reject(){
        //función para crear un log luego de generar un rechazo
        try {
            $customer = Cache::read($this->Auth->user('session_id').'customer');
            $obligaciones = Cache::read($this->Auth->user('session_id').'obligaciones');
            $this->Log(
                [
                    'customer_type_identification_id' => $customer->customer_type_identification_id,
                    'customer_identification' => $customer->id,
                    'answer' => 1
                ]
            );
            $customer['income'] = "0";
            $customer['payment_capacity'] = "0";
            
            $this->createHistory($obligaciones,$customer);
        } catch (Exception $th) {
            throw new Exception("Error crear un nuevo history, despues de un rechazo.", 1, $th);
        } 
    }

    public function reject_offer($alternative = 'Si'){
        //Rechazo por árbol de decisión
        try {
            $this->autoRender = false;
            $this->updateHistory($this->customer,HistoryStatusesTable::RECHAZADA,$alternative);
            $this->reject();
        } catch (Exception $th) {
            throw new Exception("Error al momento de actualizar history, despues de un rechazo realizado por árbol de decisión .", 1, $th);
        }
    }

    public function rejectOfferNegotiation($alternative = 'Si'){
        //Rechazo por asesor o coordinador
        $this->autoRender = false;
        $connection = ConnectionManager::get('default');
        $connection->begin();
        $idHistoryL = Cache::read($this->Auth->user('session_id').'-'.$this->customer->id.'-history');
        $idLogL = Cache::read($this->Auth->user('session_id') . 'log');
        $customerL = Cache::read($this->Auth->user('session_id').'customer');
        $parametros = [
            'idHistory' => $idHistoryL,
            'idLog' => $idLogL,
            'customer' => $customerL->id,
            'cargue' => $customerL->charge_id,
            'capacidad_pago' => $customerL->payment_capacity
        ];
        try {
            $this->updateHistory($this->customer,HistoryStatusesTable::RECHAZADA,$alternative);
            $this->reject();
            $mensaje = "Finaliza la función de rechazo de negociación.";
            $logTran = LogTransaccionController::EscribirLog($mensaje,$parametros);
            
            $connection->commit();
            echo json_encode([
                'success' => true
            ]
        );
        } catch (Exception $th) {
            $mensaje = "Se presento un error en la función de rechazo de una negociación.";
            $logTran = LogTransaccionController::EscribirLog($mensaje,$parametros,$th);
            $connection->rollback();
            echo json_encode([
                'success' => false,
                'message' => __('En este momento no se puede completar la operación rechazar negociación, por favor intente nuevamente.')
            ]
        );
        }
        
    }

    public function ajuste_data($comite = 0){

        $this->loadModel('Offices');
        $this->obligaciones = Cache::read($this->Auth->user('session_id').'obligaciones');
        $normalizacion = Cache::read($this->Auth->user('session_id').'normalizacion');

        try{
            if(isset($this->request->data['oficina_id'])) {
                /** @var  $oficina Office */
                $oficina = $this->Offices->find()
                    ->contain(['CityOffices'])
                    ->where(['Offices.id' => $this->request->getData('oficina_id')])
                    ->first();

                $nameOficina = $oficina->name;
                $nameCiudad = $oficina->city_office->name;
                $address = $oficina->address;

            }else{
                $nameOficina = $this->request->getData('oficina');
                $address = $this->request->getData('oficina');
                $nameCiudad = $this->request->getData('ciudad');
            }

            $normalization = 0;

            if(isset($this->request->data['propuesta_aceptada'])) {
                $normalizacion = $normalizacion['data'][$this->request->getData('propuesta_aceptada')];
                $this->negociacion['normalizacion'] = $normalizacion;

                $normalization = 1;

                Cache::write($this->Auth->user('session_id').'negociacion',$this->negociacion);
            }

            $this->loadModel('AdjustedObligations');

            $ids = [];

            $paymentAgreed = str_replace('.','',$this->request->getData('payment_agreed'));
            $paymentAgreedUnificacion = str_replace('.','',$this->request->getData('payment_agreed_unificacion'));

            //$pagoAcumuladoResumen = ((int) $paymentAgreed + (int) $paymentAgreedUnificacion);
            $pagos = array();
            if(isset($_POST['pago'])){
                $pagos = $_POST['pago'];
            }
            foreach($this->obligaciones as $obligacion){

                if(isset($pagos[$obligacion->id])){
                    $TotalPagoReal += str_replace('.','',$pagos[$obligacion->id]);
                }
            }
            $pagoAcumuladoResumen = (int) $paymentAgreedUnificacion + (int) $TotalPagoReal;

            $dataObligacion = $this->request->getData('obligacion');

            $codeManager = $this->Auth->user('busines.code_of_recovery');
            $idLogL = Cache::read($this->Auth->user('session_id') . 'log');

            if(empty($codeManager) && !empty($this->Auth->user('busines_id'))){
                $this->loadModel('Business');
                $business = $this->Business->get($this->Auth->user('busines_id'));
                $codeManager = $business->code_of_recovery;
            }

            $datosU = false;
            if(empty($codeManager)){
                Log::warning('Datos usuario - 2'.$codeManager,'historial');
                Log::warning($this->Auth->user(),'historial');
                $datosU = true;
            }

            $data = [
                'type_identification' => $this->customer->customer_type_identification_id,
                'identification' => $this->customer->id,
                'customer_paid_capacity' => $this->customer->payment_capacity,
                'initial_payment_punished' => $this->customer->initial_payment_punished,
                'customer_revenue' => $this->customer->income,
                'payment_agreed' => $pagoAcumuladoResumen,
                'documentation_date' => $this->request->getData('fecha'),
                'credit_payment_day' => $this->request->getData('dia_pago_credito') ? $this->request->getData('dia_pago_credito') : null,
                'documents_required' => $this->request->getData('documentos_pagare') !== null && $this->request->getData('documentos_pagare') !== '' ? sprintf("%01d", $this->request->getData('documentos_pagare')) : null,
                'city' => $nameCiudad,
                'office_name' => $nameOficina,
                'office_address' => $address,
                'customer_email' => $this->customer->email,
                'customer_name' => $this->customer->name,
                'customer_telephone' => $this->customer->mobile,
                'date_negotiation' => date('Y-m-d H:i:s'),
                'user_dataweb' => $this->Auth->user('name'),
                'user_id' => $this->Auth->user('id'),
                'pending_committee' => $comite,
                'normalization' => $normalization,
                'company_code' => $codeManager,
                'code_manager' => (empty($this->Auth->user('code_manager')))?$codeManager:$this->Auth->user('code_manager'),
                'log_id' => Cache::read($this->Auth->user('session_id') . 'log')
            ];

            if($this->request->getData('propuesta_aceptada_castigada') != null){
                $propuestaCastigada = Cache::read($this->Auth->user('session_id').'propuesta_castigada');
                $propuestaCastigada = $propuestaCastigada[$this->request->getData('propuesta_aceptada_castigada')];

                $data['initial_condonation'] = $propuestaCastigada['condonacion_inicial'];
                $data['end_condonation'] = $propuestaCastigada['condonacion'];
                $data['initial_payment'] = $propuestaCastigada['pago_inicial'];
                $data['value_initial_condonation'] = $propuestaCastigada['valor_condonacion_inicial'];
                $data['value_end_condonation'] = $propuestaCastigada['valor_condonacion'];
            }

            if($ofertaVehiculo = Cache::read($this->Auth->user('session_id').'vehiculo')){
                $data['vh_total_payment'] = $ofertaVehiculo['total_payment'];
                $data['vh_total_payment_expert'] = $ofertaVehiculo['total_payment_expert'];
                $data['vh_customer_offer'] = $ofertaVehiculo['customer_offer'];
                $data['vh_condonation'] = $ofertaVehiculo['condonation'];
                $data['vh_value_condonation'] = $ofertaVehiculo['value_condonation'];
                $data['vh_condonation_expert'] = $ofertaVehiculo['condonation_expert'];
                $data['vh_value_condonation_expert'] = $ofertaVehiculo['value_condonation_expert'];

                $data['vh_date_valorization'] = $ofertaVehiculo['date_valorization'];
                $data['vh_type_valorization'] = $ofertaVehiculo['type_valorization'];
                $data['vh_value_valorization'] = $ofertaVehiculo['value_valorization'];
                $data['vh_value_parking'] = $ofertaVehiculo['value_parking'];
                $data['vh_value_subpoena'] = $ofertaVehiculo['value_subpoena'];
                $data['vh_value_taxes'] = $ofertaVehiculo['value_taxes'];
                $data['vh_value_others'] = $ofertaVehiculo['value_others'];

            }

            /** @var  $obligacion Obligation*/
            foreach($this->obligaciones as $obligacion){
                if(isset($dataObligacion[$obligacion->id]['acepta'])){
                    if($dataObligacion[$obligacion->id]['acepta'] == 1){
                        $obligacion->negociable = 1;
                    }
                }

                if($obligacion->negociable == 1) {
                    $ids[] = $obligacion->id;
                    if($obligacion->estrategia == ObligationsTable::NORMALIZAR){
                        $rate = $this->negociacion['normalizacion']['tasa'];
                        $anualRate = $this->negociacion['normalizacion']['tasa_anual'];
                        $nuevaCuota = $this->negociacion['normalizacion']['cuota'];
                        $nuevoPlazo = $this->negociacion['normalizacion']['plazo'];
                    }elseif ($obligacion->estrategia == ObligationsTable::ACPK){
                        $rate = $propuestaCastigada['tasa'];
                        $anualRate = $propuestaCastigada['tasa_anual'];
                        $nuevaCuota = $propuestaCastigada['cuota'];
                        $nuevoPlazo = $propuestaCastigada['plazo'];
                    }else{
                        $rate = $obligacion->tasaMensual;
                        $anualRate = $obligacion->rate;
                        $nuevaCuota = $obligacion->nuevaCuota;
                        $nuevoPlazo = (int)$obligacion->nuevoPlazo;
                    }

                    if($obligacion->estrategia == 0){

                    }

                    $data['adjusted_obligations_details'][]  = [
                        'strategy' => $obligacion->estrategias[$obligacion->estrategia],
                        'type_strategy' => $obligacion->estrategia,
                        'total_debt' => $obligacion->total_debt,
                        'annual_effective_rate' => $anualRate,
                        'nominal_rate' => $rate,
                        'monthly_rate' => $rate,
                        'months_term' => $nuevoPlazo,
                        'obligation' => $obligacion->obligation,
                        'type_obligation' => $obligacion->type_obligation->type,
                        'previous_minimum_payment' => $obligacion->minimum_payment,
                        'initial_fee' => (int) $obligacion->fee,
                        'new_fee' => (int) $nuevaCuota,
                        'payment_agreed' => $obligacion->pagoReal,
                        'currency' => $obligacion->currency,
                        'origin' => $obligacion->origin,
                        'retrenched_policy' => $obligacion->retrenched_policy,
                        'sequential_obligation' => $obligacion->sequential_obligation
                    ];
                    
                }
            }

            if($datosU){
                Log::warning('Datos gestión - 2','historial');
                Log::warning($data,'historial');
            }
            Cache::write($this->Auth->user('session_id').'obligaciones',$this->obligaciones);
            $timeInicio = microtime(true);
            $entity = $this->AdjustedObligations->newEntity($data,['associated' => ['AdjustedObligationsDetails']]);

            $error = [];

            if(!empty($entity->getErrors())){
                $error[] = $entity->getErrors();
            }
            if(empty($error)){
                $result = $this->AdjustedObligations->save($entity,['associated' => ['AdjustedObligationsDetails']]);
                $timeFinal = microtime(true);
                $duracion = ($timeFinal) - ($timeInicio);
                $logTran = LogTransaccionController::EscribirTiempo('Finalizar','Insertar AdjustedObligations','BaseObligationsController','ajuste_data',$idLogL,$duracion);
                return $result->id;
            }
        }catch (Exception $th) {
            throw new Exception ("Error en el metdo de persistencia en adjusted obligations",0,$th);
        }
    }

    public function resultado(){


        $deudaParqueadero = $this->request->getData('deuda_parqueadero');
        $deudaImpuestos = $this->request->getData('deuda_impuestos');
        $deudaComparendos = $this->request->getData('deuda_comparendos');
        $deudaGastos = $this->request->getData('gastos_mantenimiento');

        $tipoAvaluo = $this->request->getData('tipo_avaluo');
        $fechaAvaluo = $this->request->getData('fecha_avaluo');
        $valorAvaluo = str_replace('.','',$this->request->getData('valor_avaluo'));

        /** @var  $obligation Obligation*/
        foreach ($this->obligaciones as $obligation){
            if($obligation->id == $this->request->getQuery('id')){
                $resultado = $obligation->valoresSegunEtapa($tipoAvaluo,$valorAvaluo,$fechaAvaluo,$deudaParqueadero,$deudaImpuestos,$deudaComparendos);
                $obligation->estrategia = 15;
                $obligation->nuevoPlazo = 1;
                $obligation->nuevaCuota = $resultado['pago_total'];

                $this->set('obligacion',$obligation);
            }
        }

        $this->set('resultado',$resultado);

        $this->viewBuilder()->setTemplatePath('/Obligations');

        $this->render('resultado');

    }

    public function validarOfertaVehiculo(){

        $this->autoRender = false;
        $this->response->type('json');
        $this->loadModel('HistoryPaymentVehicles');
        $connection = ConnectionManager::get('default');
        $connection->begin();

        try {
            $ofertaCliente = str_replace('.','',$this->request->getData('cliente_oferta_vehiculo'));
            $pagoTotal = 0;
            $pagoTotalExperto = 0;
            $condonacionTotal = 0;
            $valorCondonacionTotal = 0;
            $condonacionTotalE = 0;
            $valorCondonacionTotalE = 0;
            $totalDeuda = 0;
    
            $vehiculos = $this->request->getData('vehiculo');
    
            $this->obligaciones = Cache::read($this->Auth->user('session_id').'obligaciones');
            $idHistory = Cache::read($this->Auth->user('session_id').'-'.$this->customer->id.'-history');
    
            foreach ($this->obligaciones as $obligation) {
                if ($obligation->type_obligation_id == TypeObligationsTable::VEH && isset($vehiculos[$obligation->id])) {
                    $vehiculo = $vehiculos[$obligation->id];
    
                    $deudaParqueadero = str_replace('.','',$vehiculo['deuda_parqueadero']);
                    $deudaImpuestos = str_replace('.','',$vehiculo['deuda_impuestos']);
                    $deudaComparendos = str_replace('.','',$vehiculo['deuda_comparendos']);
                    $deudaGastos = str_replace('.','',$vehiculo['gastos_mantenimiento']);
                    $tipoAvaluo = $vehiculo['tipo_avaluo'];
                    $fechaAvaluo = $vehiculo['fecha_avaluo'];
                    $valorAvaluo = str_replace('.','',$vehiculo['valor_avaluo']);
    
                    $resultado = $obligation->valoresSegunEtapa($tipoAvaluo,$valorAvaluo,$fechaAvaluo,$deudaParqueadero,$deudaImpuestos,$deudaComparendos,$deudaGastos);
                    $totalDeuda += $obligation->total_debt;
                    $pagoTotal += $resultado['pago_total'];
                    $pagoTotalExperto += $resultado['pago_total_experto'];
                    $condonacionTotal += $resultado['condonacion_total'];
                    $valorCondonacionTotal += $resultado['valor_condonacion_total'];
                    $condonacionTotalE += $resultado['condonacion_total_experto'];
                    $valorCondonacionTotalE += $resultado['valor_condonacion_total_experto'];
                }
            }
            /** @var  $obligation Obligation*/
            foreach ($this->obligaciones as $obligation){
                if($obligation->type_obligation_id == TypeObligationsTable::VEH && isset($vehiculos[$obligation->id])){
    
    
                    $obligation->estrategia = 15;
                    $obligation->nuevoPlazo = 1;
                    if($ofertaCliente >= $totalDeuda){
                        $nuevaCuota = $totalDeuda;
                    }else{
                        $nuevaCuota = $ofertaCliente;
                    }
                    $obligation->nuevaCuota = $nuevaCuota;
    
    
                    $this->set('obligacion',$obligation);
                }
            }
    
    
            $pagoTotalInicial = $pagoTotal;
    
            $mensaje1 = __('Su caso debe ser evaluado por un comité.');
            $mensaje2 = __('Lo sentimos, no tenemos ninguna oferta para su credito de vehiculo que se ajuste a su capacidad de pago.');
    
            $oferta = false;
            $comite = false;
    
            $mensaje = $mensaje2;
    
            if($ofertaCliente >= $totalDeuda){
                $condonacionTotal = 0;
                $valorCondonacionTotal = 0;
                $pagoTotal = $totalDeuda;
                $oferta = true;
    
            }elseif($ofertaCliente >= $pagoTotal){
                $condonacionTotal = 1-($ofertaCliente/$totalDeuda);
                $valorCondonacionTotal = $totalDeuda*$condonacionTotal;
                $pagoTotal = $ofertaCliente;
                $oferta = true;
            }elseif ($ofertaCliente >= $pagoTotalExperto){
                $condonacionTotal = 1-($ofertaCliente/$totalDeuda);
                $valorCondonacionTotal = $totalDeuda*$condonacionTotal;
                $pagoTotal = $ofertaCliente;
                $oferta = true;
                if($ofertaCliente <= $pagoTotalInicial){
                    $comite = true;
                    $mensaje = $mensaje1;
                }
            }
    
            $nuevoHistorial = true;
            if($idHistory){
                $nuevoHistorial = false;
                
                $history = $this->HistoryPaymentVehicles->newEntity();
                $data = [
                    'total_payment' => $pagoTotal,
                    'total_payment_expert' => $pagoTotalExperto,
                    'customer_offer' => $ofertaCliente,
                    'condonation' => $condonacionTotal,
                    'value_condonation'  => $valorCondonacionTotal,
                    'condonation_expert' => $condonacionTotalE,
                    'value_condonation_expert'  => $valorCondonacionTotalE,

                    'value_parking'  => $deudaParqueadero,
                    'value_subpoena'  => $deudaComparendos,
                    'value_taxes'  => $deudaImpuestos,
                    'value_others'  => $deudaGastos,
                    'value_valorization'  => $valorAvaluo,
                    'type_valorization'  => $tipoAvaluo,
                    'date_valorization'  => $fechaAvaluo,

                    'history_customer_id' => $idHistory,
                ];

                Cache::write($this->Auth->user('session_id').'obligaciones',$this->obligaciones);
                Cache::write($this->Auth->user('session_id').'vehiculo',$data);

                $history = $this->HistoryPaymentVehicles->patchEntity($history, $data);
                $this->HistoryPaymentVehicles->save($history);
            }

            $obligaciones = Cache::read($this->Auth->user('session_id').'obligaciones');
    
            if($oferta == true){
                if($nuevoHistorial){
                    $idHistory = $this->createHistory($obligaciones,$this->customer,HistoryStatusesTable::PENDIENTE,'Si');
                }else{
                    $idHistory = $this->updateHistory($this->customer,HistoryStatusesTable::PENDIENTE,'Si');
                }
                
            }else{
                if($nuevoHistorial){
                    $idHistory = $this->createHistory($obligaciones,$this->customer,HistoryStatusesTable::RECHAZADA,'No');
                }else{
                    $this->reject_offer('No');
                    //$idHistory = $this->updateHistory($this->customer,HistoryStatusesTable::RECHAZADA,'No');
                }
            }
    
            $connection->commit();

            echo json_encode(array(
                'oferta' => $oferta,
                'comite' => $comite,
                'mensaje' => $mensaje
            ));
        } catch (Exception $th) {
            \Cake\Log\Log::error($th);

            $mensaje = "Ocurre un error al momento de consumir la funcion evaluar del controlador BaseObligations";
            $parametro = array(
                "id_customer" => 0,
                "id_history" => Cache::read($this->Auth->user('session_id') . '-' . $this->customer->id . '-history'),
                "id_log" => Cache::read($this->Auth->user('session_id') . 'log'),
                "capacity" => 0,
                "Obligation" => "",
            );

            $logTran = LogTransaccionController::EscribirLog($mensaje, $parametro, $th);

            $connection->rollback();
        }
    }

    public function ofertaVehiculo(){
        $obligaciones = [];
        /** @var  $obligacion Obligation*/
        foreach ($this->obligaciones as $obligacion){
            if($obligacion->type_obligation_id == TypeObligationsTable::VEH){
                $obligaciones[] = $obligacion;
            }
        }
        $this->set('obligaciones',$obligaciones);
        $this->viewBuilder()->setTemplatePath('/Obligations');
        $this->render('oferta_vehiculo');
    }

}