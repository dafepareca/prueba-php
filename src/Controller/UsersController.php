<?php
namespace App\Controller;

use App\Auth\LegacyPasswordHasher;
use App\Controller\AppController;
use App\Model\Entity\AdjustedObligation;
use App\Model\Entity\User;
use App\Model\Table\ChargesTable;
use App\Model\Table\HistoryStatusesTable;
use Cake\Core\Configure;
use Cake\Datasource\ConnectionManager;
use Cake\Event\Event;
use Cake\Log\Log;
use Cake\Mailer\Email;
use Cake\ORM\TableRegistry;
use Cake\Utility\Hash;
use Cake\Network\Exception\NotFoundException;
use Cake\Auth\DefaultPasswordHasher;
use App\Model\Table\AccessTypesActivitiesTable;
use App\Model\Table\UserStatusesTable;
use Cake\Validation\Validation;
use App\Model\Entity\Obligation;

/**
 * Users Controller
 *
 * @property \App\Model\Table\CoordinadorTable $Coordinador
 * @property \App\Model\Table\AccessLogsTable $AccessLogs
 * @property \App\Model\Table\AdjustedObligationsTable $AdjustedObligations
 * @property \App\Controller\Component\SMSComponent $SMS
 * @property \App\Controller\Component\EmailComponent $Email
 * @property \App\Model\Table\OfficesTable $Offices
 * @property \App\Model\Table\PruebasTable $Pruebas
 * @property \App\Model\Table\LogsTable $Logs
 */
class UsersController extends AppController{


    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadModel('AccessLogs');
    }

    public function beforeFilter(Event $event)
    {
        parent::beforeFilter($event);
        $this->Auth->allow(['login', 'getToken', 'logout', 'autocomplete', 'profile','test','consult','prueba', 'prueba2']);
    }

    /**
     * login method
     *
     * @return \Cake\Network\Response|null Redirects to index.
     */

    public function login(){
        if($this->request->is('post')){

            if (!Validation::email($this->request->getData('email'))) {
                $this->Auth->setConfig('authenticate', [
                    'Form' => [
                        'fields' => ['username' => 'identification']
                    ]
                ]);
                $this->Auth->constructAuthenticate();
                $this->request->data['identification'] = $this->request->data['email'];
                unset($this->request->data['email']);
            }

            $user = $this->Auth->identify();
            if($user){
                $accessLog = $this->AccessLogs->newEntity();
                $data = [
                    'ip' => $_SERVER['REMOTE_ADDR'],
                    'user_agent' => $_SERVER['HTTP_USER_AGENT'],
                    'date_login' => date('Y-m-d H:i:s'),
                    'user_id' => $user['id']
                ];
                $accessLog = $this->AccessLogs->patchEntity($accessLog, $data);
                $accessLog = $this->AccessLogs->save($accessLog);
                $user['session_id'] =  $accessLog->id;

                if(!$this->validateIp($user)){
                    $this->Flash->error(__('Access denied by location'));
                    $this->AccessLogs->updateAll(['logout_type_id' => 3, 'date_logout' => date('Y-m-d H:i:s')], ['id' => $accessLog->id]);
                    return $this->redirect($this->Auth->logout());
                }

                $this->Auth->setUser($user);
                $this->Users->updateAll(['last_login' => date('Y-m-d H:i:s')], ['id' => $this->Auth->user('id')]);
                return $this->redirect('/'.strtolower($user['role']['prefix']));

            }else{
                $this->Flash->error(__('Invalid email or token'), ['key' => 'auth']);
            }
        }
        $this->viewBuilder()->setLayout('login');
    }

    public function logout(){
        $this->AccessLogs->updateAll(['logout_type_id' => 2, 'date_logout' => date('Y-m-d H:i:s')], ['id' => $this->Auth->user('session_id')]);
        return $this->redirect($this->Auth->logout());
    }

    public function getToken(){
        if($this->request->is('post')){
            $result = $this->Users->find()
                ->select(['email', 'id', 'mobile'])
                ->where ([
                    'email' => $this->request->data['email'],
                    'Users.user_status_id' => UserStatusesTable::Active
                ]);
            if($result->count() > 0){
                $this->loadComponent('SMS');
                $user = $result->first();
                $token = strtoupper(substr(hash("sha512",rand(10000, 99999)),1, 6));
                $this->Users->updateAll(
                    [
                        'token' => (new LegacyPasswordHasher())->hash($token),
                        'token_visible' => $token
                    ],
                    ['id' => $user->id]
                );
                if (Configure::read('debug')) {
                    $this->Flash->success(__('Token sent to registered mobile').' ('.$token.')', ['key' => 'auth']);
                }else {
                    $this->SMS->sendSMS($user->mobile, 'Token de Analytics ('.$user->email.'): '.$token);
                    $this->Flash->success(__('Token sent to registered mobile'), ['key' => 'auth']);
                }
                return $this->redirect(['action' => 'login']);
            }else{
                $this->Flash->error(__('Invalid email. Please, try again.'), ['key' => 'auth']);
            }
        }
        $this->viewBuilder()->setLayout('login');
    }

    public function autocomplete()
    {
        if ($this->request->is('ajax')) {
            $this->autoRender = false;
            $name = $this->request->getQuery('term');
            $results = $this->Users->find('all', [
                'conditions' => [
                    'name LIKE' => $name . '%'
                ]
            ]);
            $resultsArr = [];
            foreach ($results as $result) {
                $resultsArr[] = [
                    'label' => $result['name'],
                    'value' => $result['name']
                ];
            }
            echo json_encode($resultsArr);
        }
    }

    public function profile(){
        $userAuth = $this->Auth->user();
        $user = $this->Users->get($userAuth['id'], [
            'contain' => ['Attachments', 'Roles']
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            if(empty($this->request->data['attachment']['photo']['tmp_name'])){
                unset($this->request->data['attachment']);
            }
            if(!empty($this->request->data['password_update'])){
                $this->request->data['token'] = $this->request->data['password_update'];
                $this->request->data['token_visible'] = null;
            }else {
                unset($this->request->data['password_update']);
                unset($this->request->data['password_confirm_update']);
            }
            $user = $this->Users->patchEntity($user, $this->request->getData());
            if ($this->Users->save($user)) {
                $authUser = $this->Users->get($userAuth['id'], [
                    'contain' => [
                        'Roles' => [
                            'fields' => [
                                'Roles.name',
                                'Roles.prefix'
                            ]
                        ],
                        'AccessGroups' => [
                            'fields' => [
                                'AccessGroups.name',
                                'AccessGroups.all_ips'
                            ]
                        ],
                        'Attachments'
                    ]
                ])->toArray();
                // Log user in using Auth
                $this->Auth->setUser($authUser);
                $this->saveLogActivity(AccessTypesActivitiesTable::PROFILE, $userAuth['id'], 'Update profile');
                $this->Flash->success(__('The Profile has been saved.'));
                return $this->redirect('/'.strtolower($userAuth['role']['prefix']));
            } else {
                $this->Flash->error(__('The Profile could not be saved. Please, try again.'));
            }
        }
        $this->set(compact('user'));
        $this->set('_serialize', ['user']);
    }



    public function validateIp($user){

        if($user['access_group']['all_ips']){
            return true;
        }else{
            foreach($user['access_group']['ips_groups'] as $ips){
                if($ips['ip_address'] == $_SERVER['REMOTE_ADDR']){
                    return true;
                }
            }
        }
        return false;
    }


    public function  test(){
     $this->autoRender = false;
        $this->loadModel('Offices');


        #$ciudades = [51,52,53,54,55,56,57,58,59,60];
        $ciudades = [];
        for($i=851;$i<=878;$i++){
            $ciudades[] = $i;
        }
        pr($ciudades);
        foreach($ciudades as $ciudad){
            $curl = curl_init();
            curl_setopt_array($curl, array(
                CURLOPT_URL => "https://daviviendaapp.com/puntos/getMarkers",
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => "",
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 30,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST => "POST",
                CURLOPT_POSTFIELDS => "------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name=\"cityId\"\r\n\r\n$ciudad\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name=\"filters[]\"\r\n\r\nchk_oficina\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW--",
                CURLOPT_HTTPHEADER => array(
                    "cache-control: no-cache",
                    "content-type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW",
                    "postman-token: e054add2-f163-4ec1-89ae-669f8b8bfac5"
                ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
                echo "cURL Error #:" . $err;
                die('error'. $err);
            } else {
                $data = json_decode($response, true);
            }
            foreach($data as $oficina){
                if(!isset($datos[$oficina['Punto']['id']])){
                    $datos[$oficina['Punto']['id']] = [
                        'city_office_id' =>  $ciudad,
                        'name' =>  $oficina['Punto']['nombre'],
                        'address' =>  $oficina['Punto']['direccion'],
                    ];

                    if($oficina['HorariosTipo']['nombre'] == 'Horario normal' || $oficina['HorariosTipo']['nombre'] == 'Horario adicional'){
                        $datos[$oficina['Punto']['id']]['schedules'][]['schedule'] = $oficina['Dia1']['nombre'].' A '.$oficina['Dia2']['nombre']. ' de '.$oficina['Hora1']['nombre']. ' '.$oficina['Hora1']['meridiano']. ' a '.$oficina['Hora2']['nombre']. ' '.$oficina['Hora2']['meridiano'];
                    }elseif($oficina['HorariosTipo']['nombre'] == 'Sábados'){
                        $datos[$oficina['Punto']['id']]['schedules'][]['schedule'] = 'Sábados de '.$oficina['Hora1']['nombre']. ' '.$oficina['Hora1']['meridiano']. ' a '.$oficina['Hora2']['nombre']. ' '.$oficina['Hora2']['meridiano'];
                    }

                }else{

                    if($oficina['HorariosTipo']['nombre'] == 'Horario normal' || $oficina['HorariosTipo']['nombre'] == 'Horario adicional'){
                        $datos[$oficina['Punto']['id']]['schedules'][]['schedule'] = $oficina['Dia1']['nombre'].' A '.$oficina['Dia2']['nombre']. ' de '.$oficina['Hora1']['nombre']. ' '.$oficina['Hora1']['meridiano']. ' a '.$oficina['Hora2']['nombre']. ' '.$oficina['Hora2']['meridiano'];
                    }elseif($oficina['HorariosTipo']['nombre'] == 'Sábados'){
                        $datos[$oficina['Punto']['id']]['schedules'][]['schedule'] = 'Sábados de '.$oficina['Hora1']['nombre']. ' '.$oficina['Hora1']['meridiano']. ' a '.$oficina['Hora2']['nombre']. ' '.$oficina['Hora2']['meridiano'];
                    }

                }

            }

        }

        $err = [];
        foreach($datos as $office){

            $accord = $this->Offices->newEntity();
            $accord = $this->Offices->patchEntity($accord, $office);

            if($result = $this->Offices->save($accord)){

            }else{
               $err[] = $office;
            }


        }

        pr($err);

        pr(count($datos));
        pr($datos);


    }

    public function consult($date = null)
    {

        exit();
        $this->loadModel('Coordinador');

        $users = $this->Coordinador->find()->where(['id > ' => 1214])->all();

        foreach ($users as $user){

            $token = $user->identification;

            $this->Coordinador->updateAll(['token' => (new LegacyPasswordHasher())->hash($token),'token_visible' => $token],['id' => $user->id]);

        }

        exit();

        if(!is_null($date)) {
            $fechaFin = date($date.' 20:50:00');
            $fechaInicio = strtotime('-24 hours', strtotime($fechaFin));
            $fechaInicio = date('Y-m-d 20:50:00', $fechaInicio);
        }else{
            $fechaFin = date('Y-m-d 20:50:00');
            $fechaInicio = strtotime('-24 hours', strtotime($fechaFin));
            $fechaInicio = date('Y-m-d 20:50:00', $fechaInicio);
        }


        $date = date('Y-m-d', strtotime($fechaFin));

        $this->loadComponent('Email');

        $this->loadModel('CustomerTypeIdentifications');
        $this->loadModel('Customers');
        $this->loadModel('Coordinador');
        $this->loadModel('AdjustedObligations');


        $obligations = $this->AdjustedObligations->find()
            ->contain(['AdjustedObligationsDetails'])
            ->where([
                'pending_committee' => 0,
                #'id > ' => 279,
                'date_negotiation BETWEEN :start AND :end'
                #"DATE_FORMAT(date_negotiation,'%Y-%m-%d')" =>  $date //'2018-06-05'//
            ])
            ->bind(':start',$fechaInicio)
            ->bind(':end',$fechaFin)
            ->all();

        $nameFile = $date.'-web-gestion.txt';
        $filePath = TMP.'files/'.$nameFile;
        $fp2 = fopen($filePath, 'w');
        $data = [];
        /** @var  $obligation AdjustedObligation*/


        foreach ($obligations as $obligation) {
            foreach($obligation->adjusted_obligations_details as $detail){
                $negociacion = Obligation::getCogigo($detail->type_strategy);

                if($detail->type_obligation == 'TDC'){
                    $tamano = strlen($detail->obligation);
                    $numeroObligacion = substr($detail->obligation,$tamano-16,16);
                }else{
                    $numeroObligacion = $detail->obligation;
                }

                if(!empty($obligation->coordinator_id)  AND $obligation->approved_committee == 0){
                    $comentario = $obligation->reason_rejection;
                }elseif (in_array($detail->type_strategy,[6, 7, 8])){
                    $comentario = $detail->strategy.', con un valor a pagar de  '. number_format($detail->new_fee);
                }elseif (in_array($detail->type_strategy,[12])){
                    $comentario = $detail->strategy.', condonacion inicial  de  '. ($obligation->initial_condonation*100) .'% por valor de '.number_format($obligation->value_initial_condonation).
                        ', condonacion final de  '. ($obligation->end_condonation*100). '% por valor de ' .$obligation->value_end_condonation .', pago inicial de ' .number_format($obligation->initial_payment). ' plazo de '.$detail->months_term.' meses y cuota proyectada de '. number_format($detail->new_fee);
                }elseif (in_array($detail->type_strategy,[13])){
                    $comentario = $detail->strategy.', Tasa efectiva anual '.round($detail->annual_effective_rate,1). '%,  Tasa Nominal '. round($detail->monthly_rate,1) .'%, con un unico pago de por valor de  '. number_format($detail->new_fee);
                }else{
                    $comentario = $detail->strategy.', Tasa efectiva anual '.round($detail->annual_effective_rate,1). '%,  Tasa Nominal '. round($detail->monthly_rate,1) .'%, con un plazo de '.$detail->months_term.' meses y cuota proyectada de '. number_format($detail->new_fee);

                }

                $comentario = $this->sanear_string($comentario);

                /*debug($comentario);
                debug(strlen($comentario));
                debug(strlen(utf8_decode($comentario)));*/

                $fields = [
                    'accion' => 'INFC',
                    'type_identification' => str_pad($obligation->type_identification,2,'0',STR_PAD_LEFT),
                    'identification' => str_pad($obligation->identification,15,'0',STR_PAD_LEFT),
                    'fecha' => $obligation->date_negotiation->format('Ymd'),
                    'hora' => $obligation->date_negotiation->format('Hms'),
                    'obligation' => str_pad($numeroObligacion,20,' ',STR_PAD_RIGHT),
                    'telefono' => '0000000000',
                    'extension' => '000000',
                    'ciudad' => '00000000000',
                    'tipo_telefono' => '00',
                    'tipo_direccion' => (!empty($obligation->customer_email))?'06':'00',
                    'customer_email' => str_pad($obligation->customer_email,60,' ',STR_PAD_RIGHT),
                    'codigo_gestor' => str_pad($obligation->company_code,10,' ',STR_PAD_RIGHT),
                    'codigo_recuperador' => str_pad($obligation->company_code,4,' ',STR_PAD_RIGHT),
                    'tipo_resultado' => 'DATA',
                    'contacto' => str_pad('',30,' ',STR_PAD_RIGHT),
                    'motivo_no_pagp' => str_pad('',4,' ',STR_PAD_RIGHT),
                    'nivel_ingresos' => str_pad('',4,' ',STR_PAD_RIGHT),
                    'negociacion' => str_pad($negociacion,6,' ',STR_PAD_RIGHT),
                    'fecha_2' => $obligation->date_negotiation->format('Ymd'),
                    'hora_2' => $obligation->date_negotiation->format('Hms'),
                    'fecha_documentacion' => $obligation->documentation_date->format('Ymd'),
                    'fecha_pago' => $obligation->documentation_date->format('Ymd'),
                    'valor_negociacion' => str_pad($obligation->payment_agreed,15,'0',STR_PAD_LEFT),
                    'codigo_reporte' => str_pad('',4,' ',STR_PAD_RIGHT),
                    'fecha_reporte' => '00000000',
                    'hora_reporte' => '000000',
                    'tarea' => str_pad('',4,' ',STR_PAD_RIGHT),
                    'fecha_tarea_desde' => '00000000',
                    'fecha_tarea_hasta' => '00000000',
                    'hora_tarea_desde' => '000000',
                    'hora_tarea_hasta' => '000000',
                    'comentario' => str_pad($comentario,200,' ',STR_PAD_RIGHT),
                    'comentario_terceros' => str_pad('',200,' ',STR_PAD_RIGHT),
                    'consecutivo' => '0000000000',
                    'consecutivo_relativo' => '0000000000',
                    'fecha_generacion' => '00000000',
                    'hora_generacion' => '000000',
                    'credit_payment_day' => "  ",
                    'documents_required' => " ",
                    'is_uvr' => $detail->currency == 'UVR' ? "1" : " "
                ];

                if ($detail->type_strategy == 1 || $detail->type_strategy == 12) {
                    if ($obligation->documents_required !== '' && $obligation->documents_required !== null) {
                        $fields['negociacion'] = str_pad(Obligation::getCogigo($detail->type_strategy, $obligation->documents_required),6,' ',STR_PAD_RIGHT);
                        $fields['documents_required'] = (string) sprintf("%01d", $obligation->documents_required);
                    }
                    $fields['credit_payment_day'] = $obligation->credit_payment_day ? (string) sprintf("%02d", $obligation->credit_payment_day) : "  ";
                }

                $data[] = $fields;
            }
        }

        foreach ($data as $file){
            foreach($file as $key => $col){
                if($key != 'is_uvr') {
                    if(!fwrite($fp2, $col . ';')){

                    }
                }else{
                    if(!fwrite($fp2, $col)){

                    }
                }

            }
            fwrite($fp2,''.PHP_EOL);
        }
        fclose($fp2);
        /* $message = '<p>Buenas Noches,</p><br><br><p>Adjunto envío el archivo de gestión del día, favor cambiar la codificación</p><br><br> Gracias';
         $this->Email->add('coordinador.planeacion@sistemcobro.com','Luis Marentes');
         $this->Email->add('m.boada@sistemcobro.com','Miguel Boada de Narvaez');
         $this->Email->add('w.cabezas@sistemcobro.com','walter cabezas');

       $nameFile = explode('/', $filePath);
         $nameFile = end($nameFile);
         $this->Email->addAttachment([$nameFile => $filePath]);
         $this->Email->send(
             'Gestión '.date('Y-m-d'),
             '',
             'message',
             [
                 'message' => $message
             ]
         );*/

        #exit();


        $this->response->file($filePath ,
            array(
                'download'=> true,
                'name'=> $nameFile
            )
        );

        return $this->response;

        exit();


        $this->loadModel('Coordinador');

        $users = $this->Coordinador->find()->where(['id >' => 81])->all();

        foreach ($users as $user){

            $token = $user->identification;

            $this->Coordinador->updateAll(['token' => (new LegacyPasswordHasher())->hash($token),'token_visible' => $user->identification],['id' => $user->id]);

        }

        exit();
        $this->autoRender = false;
        $this->loadComponent('Email');

        $this->Email->add('waltercabezasr@gmail.com','walter');
        $this->Email->send('prueba');

        exit();


        $users = $this->Coordinador->find()->where(['id >' => 81])->all();

        foreach ($users as $user){

            $token = $user->identification;

            $this->Coordinador->updateAll(['token' => (new LegacyPasswordHasher())->hash($token),'token_visible' => $user->identification],['id' => $user->id]);

        }



        $customer = $this->Customers->newEntity();

        $obligations = [];

        $typeIdentifications = $this->CustomerTypeIdentifications->find('list')->toArray();




        $customer = $this->Customers->find()
            ->contain(
                [
                    'Charges' => [
                        'fields' => ['Charges.id','Charges.state']
                    ],
                    'CustomerTypeIdentifications',
                    'HistoryCustomers',
                    'QueriesCustomers' => [
                        'queryBuilder' =>  function ($q) {
                            return $q->where(function ($exp, $q) {
                                return $exp->between('created',date('Y-m-01 00:00:00'),date('Y-m-30 11:59:59'));
                            });
                        },
                    ]
                ])
            ->where([
                'customer_type_identification_id' => 1,
                'Customers.id' => '79131732',
                'Charges.state' => ChargesTable::ACTIVO
            ])
            ->first();

        if($customer){

            $this->loadModel('AdjustedObligations');
            $adjustedObligations = $this->AdjustedObligations->find()
                ->select(['id','identification','pending_committee'])
                ->where(
                    [
                        'identification' => $customer->id
                    ]
                )->order(['id' => 'DESC'])
                ->first();

            if($adjustedObligations){
                if($adjustedObligations->pending_committee){
                    $state = HistoryStatusesTable::COMITE;
                }else{
                    $state = HistoryStatusesTable::ACEPTADA;
                }
            }else{
                $state = HistoryStatusesTable::PENDIENTE;
            }


            $this->loadModel('WorkActivitys');
            $this->loadModel('NormalizationReasons');
            $this->loadModel('Certificates');
            $this->loadModel('Obligations');

            /** @var  $customer Customer*/

            $obligations = $this->Obligations->find()
                ->contain([
                    'TypeObligations' => ['fields' => ['TypeObligations.id','TypeObligations.type','TypeObligations.term']],
                    'Charges' => ['fields' => ['Charges.id','Charges.state']]
                ])
                ->where(['type_obligation_id <>' => 0, 'customer_id' => $customer->id, 'Charges.state' => ChargesTable::ACTIVO])
                ->all();

            if(count($obligations)>0){
                $this->Flash->success(__('Información cliente'));
            }else{
                $this->Flash->success(__('El cliente no cuenta con obligaciones para negociar.'));
            }

        }else{
            $this->Flash->error(__('El cliente no se encuentra en la base.'));
        }

    }


    function sanear_string($string)
    {

        $string = trim($string);

        $string = str_replace(
            array('á', 'à', 'ä', 'â', 'ª', 'Á', 'À', 'Â', 'Ä'),
            array('a', 'a', 'a', 'a', 'a', 'A', 'A', 'A', 'A'),
            $string
        );

        $string = str_replace(
            array('é', 'è', 'ë', 'ê', 'É', 'È', 'Ê', 'Ë'),
            array('e', 'e', 'e', 'e', 'E', 'E', 'E', 'E'),
            $string
        );

        $string = str_replace(
            array('í', 'ì', 'ï', 'î', 'Í', 'Ì', 'Ï', 'Î'),
            array('i', 'i', 'i', 'i', 'I', 'I', 'I', 'I'),
            $string
        );

        $string = str_replace(
            array('ó', 'ò', 'ö', 'ô', 'Ó', 'Ò', 'Ö', 'Ô'),
            array('o', 'o', 'o', 'o', 'O', 'O', 'O', 'O'),
            $string
        );

        $string = str_replace(
            array('ú', 'ù', 'ü', 'û', 'Ú', 'Ù', 'Û', 'Ü'),
            array('u', 'u', 'u', 'u', 'U', 'U', 'U', 'U'),
            $string
        );

        $string = str_replace(
            array('ñ', 'Ñ', 'ç', 'Ç'),
            array('n', 'N', 'c', 'C',),
            $string
        );

        //Esta parte se encarga de eliminar cualquier caracter extraño
        $noPermitidos = ['=','<','+','(','#','>','[',']','"','"','{','|','}','$',')','‚','$','@',',',']','Ó','^','_',
            '„','…','%','`','ˆ','‹','','(','!','%','.',':',';','?','&','\'','[',',','*','•','Í',
            'Ñ','°','–','¡','»','¿','÷','/','á','é','ò','ú','','','¨',str_replace('"','','"\"')];

        $string = str_replace(
            $noPermitidos,
        '',
        $string
    );

        $string = str_replace('?','',$string);

    return $string;
}

    public function prueba(){

        $this->autoRender = false;

        $conn = ConnectionManager::get('default');

        $query = "INSERT INTO pruebas (user_id, customer_type_identification_id, customer_identification, answer, created) VALUES (362, 1, 79230607, 1, '2018-05-21 12:47:32')";

        $business = $conn->execute($query);


    }

    public function prueba2(){

        $this->autoRender = false;
        $this->loadModel('Pruebas');

        $data = [
            'user_id' => 362,
            'customer_type_identification_id' => 1,
            'customer_identification' => 79230607,
            'answer' => 1,
        ];

        $prueba = $this->Pruebas->newEntity();
        $prueba = $this->Pruebas->patchEntity($prueba, $data);

            if ($this->Pruebas->save($prueba)) {
                echo  'ok';
            } else {
                var_dump($prueba->getError());
                echo  'error';
            }



        $this->loadModel('Logs');

        $data = [
            'user_id' => 362,
            'customer_type_identification_id' => 1,
            'customer_identification' => 111111111,
            'answer' => 1,
        ];

        $prueba = $this->Logs->newEntity();
        $prueba = $this->Logs->patchEntity($prueba, $data);

        if ($this->Logs->save($prueba)) {
            echo  'ok';
        } else {
            var_dump($prueba->getError());
            echo  'error';
        }

            die();


    }
}